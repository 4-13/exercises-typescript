---

name: Литералы (Literal Types)
theory: |

  В программировании встречаются ситуации, когда мы работаем с ограниченным набором значений какого-то типа, например, определенными строками: сюда могут входить справочные данные, статусы и так далее. Как мог бы выглядеть статус заказа:

  ```
  Created
  Paid
  Shipped
  Delivered
  ```

  Код, который работает с этими данными, будет сохранять их в базу данных, отправлять и получать по сети, выполнять проверки того, в каком статусе находится заказ и так далее.

  Какого типа будут переменные, содержащие такие данные? Если использовать общий тип, например, `string`, то появляется множество проблем:

  * Компилятор не увидит опечаток
  * Компилятор не увидит использование недопустимых статусов
  * Мы не сможем увидеть какие статусы у нас вообще есть
  * Не сработает автокомплит в редакторе

  Для решения этой задачи, TypeScript поддерживает литеральный тип. Они доступны только для трех типов: `number`, `string` и `boolean`.

  ```typescript
  type Hexlet = 'hexlet';
  type One = 1;
  type False = false;
  ```

  С точки зрения теории множеств такой тип представляет собой множество состоящее из одного элемента, а для системы типов это ограничение, что переменной не может быть присвоено ничего, кроме указанного значения:

  ```typescript
  type TestValue = 'test';
  let test: TestValue = 'test';

  test = 'string'; // Error: Type '"string"' is not assignable to type '"test"'.
  ```

  ## Объединение литеральных типов

  Используя объединение типов, мы можем получить тип, который принимает только нужные нам значения:

  ```typescript
  type OrderStatus = 'Created' | 'Paid' | 'Shipped' | 'Delivered';
  ```

  Также литеральные типы могут комбинироваться с любыми другими типами, так мы можем получить ограничение под которых попадают все числа и `false`:

  ```typescript
  type NumberFalse = number | false;
  ```

  ## Enum

  Проблема описанная в этом уроке, в большинстве языков реализуется через перечисления, которые так же добавлены в TypeScript:

  ```typescript
  enum OrderStatus {
    Created,
    Paid,
    Shipped,
    Delivered,
  }
  ```

  Но в TypeScript с перечислениями не все так радужно. TypeScript, как мы помним, это надстройка над JavaScript добавляющая типы, но не изменяющая сам язык. В случае с Enum это не так. Перечисления это конструкция языка, которая остается существовать в коде, после трансляции кода в JavaScript.

  По этой причине, многие разработчики выбирают вместо них Union Types, которые позволяют сделать практически тоже самое с помощью простых типов.

  Несмотря на рекомендации, Enum встречаются в прикладном коде и коде библиотек и обладает более широкими возможностями. Поэтому, в любом случае, разработчик на TypeScript должен быть с ними знаком и уметь их использовать.

  ## Литеральные объекты

  ```typescript
    type Order = {
    status: 'ordered',
    cost: 100
  }

  const myOrder: Order = {
      status: 'ordered',
      cost: 100
  }
  ```

instructions: |

  Реализуйте функцию `makeTurn()`, принимающую строку `left` или `right` и перемещающую черепашку вперед-назад по одномерной карте длиной пять. Если ход невозможен, должно выброситься исключение.

  ```typescript
  const { makeTurn, state } = startGame();
  console.log(state); // ['turtle', null, null, null, null]

  makeTurn('left') // ERROR

  makeTurn('right');
  makeTurn('right');
  console.log(state); // [null, null, 'turtle', null, null]
  ```
