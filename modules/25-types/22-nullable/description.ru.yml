---

name: Null и Undefined
theory: |

  В TypeScript `null` и `undefined` не просто значения, а два типа, состоящие из одного значения. Зачем так сделано? Представьте, если бы TypeScript работал похожим образом на JavaScript, то есть эти значения можно было бы передавать в любом месте, не важно что там ожидается, строка, массив и тому подобное. К чему бы привело такое поведение?

  Варианта здесь два. Либо возникновение ошибки "вызывается несуществующий метод". Такая проблема например существует в Java.

  ```javascript
  function foo(value) {
    const upperValue = value.toUpperCase();
    // остальная логика
  }

  foo(null); // Error!
  ```

  Либо, если бы проверка была встроена в сам язык, то компилятор потребовал бы написать соответствующее условие:

  ```javascript
  function foo(value) {
    if (value != null && value != undefined) {
      const upperValue = value.toUpperCase();
    }
    // остальная логика
  }
  ```

  Что привело бы к постоянному написанию подобных условий по всему коду.

  Выделение значений `null` и `undefined` в отдельные типы, позволяет устранить указанные выше проблемы, причем так, чтобы не пришлось изобретать новый механизм. Все решение укладыватеся в концепцию "типы как множества", которые можно объединять.

instructions: |

# tips:
