---

name: Перечисления (Enums)
theory: |

  Перечисление - конструкция языка, позволяющая создать набор имен, объединенных по какому-то удобному признаку, а затем обращаться к ним. Перечисления заменяют собой использование строк для постоянных значений:

  ```typescript
  enum OrderStatus {
    Created,
    Paid,
    Shipped,
    Delivered,
  }

  const order = {
    items: 3,
    status: OrderStatus.Created,
  };
  ```

  Хранение разных статусов, пожалуй, один из самых распостраненных примеров использования перечислений, но есть и другие. С их помощью легко и удобно хранить и обращаться к различным справочным данным:

  * Направления движения
  * Стороны света
  * Дни недели
  * Месяцы

  ```typescript
  enum CardinalDirection {
    North,
    South,
    East,
    West,
  }

  const direction = CardinalDirection.North;
  ```

  Перечисление само по себе является и значением и типом. Его можно указывать как тип в параметрах функции:

  ```typescript
  setStatus(status: OrderStatus)
  ```

  Переичсления присутствуют и активно используются во многих языках, таких как Java или C#. Там с этим нет никаких проблем, но конкретно в случае TypeScript есть определенные сложности. TypeScript, как мы помним, это надстройка над JavaScript добавляющая типы, но не изменяющая сам язык. В случае с Enum это не так. Перечисления это конструкция языка, которая остается существовать в коде, после трансляции кода в JavaScript.

  По этой причине, многие разработчики рекомендуют никогда не использовать перечисления и всегда выбирать вместо них Union Types, которые позволяют сделать практически тоже самое с помощью простых типов Подробнее об этом мы поговорим в модуле посвященному типам.

  ```typescript
  type OrderStatus = 'Created' | 'Paid' | 'Shipped' | 'Delivered';
  ```

  Несмотря на рекомендации, Enum встречаются в прикладном коде и коде библиотек. Поэтому, в любом случае, разработчик на TypeScript должен быть с ними знаком и уметь их использовать.

instructions: |

  1. Реализуйте перечисление `ModalStatus`, с двумя значениями: Opened и Closed.
  2. Реализуйте функцию `buildModal()`, которая возвращает объект, описывающий собой модальное окно. Параметры функции:

    * Текст, которое должно быть внутри окна после инициализации
    * Статус, с которым надо создать объект окна

    Функция возвращает объект с двумя полями: `text` (тут хранится переданный текст) и `status` (тут хранится переданный статус)

  ```typescript
  const modal = buildModal('hexlet forever', ModalStatus.Opened);
  // { text: 'hexlet forever', status: ModalStatus.Opened }
  ```

tips:
  - |
    [Официальная документация](https://www.typescriptlang.org/docs/handbook/enums.html)
