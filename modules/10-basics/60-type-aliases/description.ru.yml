---

name: Псевдонимы Типов (Type Aliases)
theory: |

  Представьте себе программу, в которой есть объект пользователья, который используется повсеместно. В такой ситуации описание типа этого объекта будет повторяться из раза в раз в каждом определении функции. Во-первых здесь много дублирования, во-вторых значительно усложняется изменение структуры, так как придется руками править все места, где это определение встречается. Тоже самое касается и Union Types, в случае их широкого использования.

  Чтобы избежать подобных ситуаций, TypeScript позволяет задавать имя (алиас или псевдоним) для таких составных типов, чтобы не повторяться:

  ```javascript
  type User = {
    firstName: string;
    pointsCount: number;
  };
  ```

  Теперь можно провести замену во всех функциях:


  ```typescript
  function doSomething(user: User) {
    // ...
  }
  ```

  Алиас это не создание нового типа данных, а всего лишь способ сокращенно записать определение типа. Поэтому следующие примеры будут работать без проблем:

  ```typescript
  const user = {
    firstName: 'Mike',
    pointsCount: 1000,
  };

  // Оба вызова работают
  doSomething(user);
  doSomething({ firstName: 'Bob', pointsCount: 1800 });
  ```

  Алиасы можно задавать для любых типов данных, от простых:

  ```typescript
  type SomeType = string;
  ```

  до составных:

  ```typescript
  type SomeType = string | number | null;
  ```

instructions: |

  Реализуйте функцию `olderUser()`, которая принимает на вход двух пользователей и возвращает того, который старше. Если пользователи - ровесники, то возвращает `null`:

  ```typescript
  const user1 = { name: 'Petr', age: 8 };
  ```

  Определите для пользователя пвседовним, чтобы не дублировать определение его типа в параметрах функции.

# tips:
