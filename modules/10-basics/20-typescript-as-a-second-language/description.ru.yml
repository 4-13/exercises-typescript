---

name: TypeScript
theory: |

  TypeScript на нашем проекте дается как «второй язык» — это значит, что мы подразумеваем определенный багаж знаний у тех, кто учится ему здесь. В первую очередь это владение каким-либо другим языком программирования. Для понимания материала курса нужно иметь представление о типах данных, переменных, условных конструкциях, циклах, функциях, объектах (свойствах и методах) и лямбда-функциях (анонимных функциях).

  Изучение второго языка значительно проще первого, поэтому и структура материала сильно меняется. Здесь мы обзорно касаемся базовых конструкций для быстрого знакомства с синтаксисом, и переходим к интересным задачкам, ради которых, собственно, и изучается TypeScript.

  ## Установка

  ## В чём соль?

  TypeScript это JavaScript с дополнительным синтаксисом для указания типов данных. Он дает три основных преимущества:

  1. Нахождение некоторых видов ошибок еще до запуска кода
  2. Более простой рефакторинг кода
  3. Полную поддержку возможностей редактора: автодополнения, навигации по коду и т.п.

  Возьмем для примера функцию, которая складывает два числа:

  ```typescript
  function sum(a: number, b: number) {
    return a + b;
  }
  ```

  Этот код написан на TypeScript. Единственное его отличие от такого же кода на JavaScript - указание типов входных переменных

instructions: |

  На данном этапе мы знаем ещё слишком мало, чтобы писать какой-то интересный код, поэтому просто скопируйте и выполните код ниже. В этом коде используется библиотека ActiveSupport, которая расширяет язык некоторыми полезными возможностями. Изначально она была создана для Rails, но используется и за его пределами.

  ```ruby
  # На сервере время в UTC
  # Считаться будет от него
  puts 1.day.ago - 1.week + 3.hours
  ```

tips:
  - |
    [Ruby-комьюнити](https://slack-ru.hexlet.io/)
# tips:
